# -*- coding: utf-8 -*-
"""Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P3RIlQDvh2DiQlJqMjGwppkrmpshFoBM
"""

#Nishtha Singhal 2017302

from google.colab import drive
drive.mount('/content/drive')

import cv2
import os
from pylab import *
import numpy as np
import matplotlib.pyplot as plt
from scipy import ndimage, spatial
from scipy.ndimage import filters

images_dir = "/content/drive/My Drive/MCA - Assignment 1/images/"
queries_dir = "/content/drive/My Drive/MCA - Assignment 1/train/query/"
gt_dir = "/content/drive/My Drive/MCA - Assignment 1/train/ground_truth/"
pkl_dir = "/content/drive/My Drive/MCA - Assignment 1/Nishtha's Code/data/2/"

count = 1
for filename in os.listdir(images_dir):
  print("processing " + str(count))
  count += 1
  img = cv2.imread("/content/drive/My Drive/MCA - Assignment 1/Nishtha's Code/data/sunflower.jpeg",0)/255.0  #images_dir + filename,0)/255.0  #
  images = [] 
  width = int(image.shape[1] * 1)
  height = int(image.shape[0] * 1)
  # img = cv2.resize(img, (width,height))
  for i in range(0,9):

    s = 1.414**i
    n = np.ceil((1.414**i)*6)
    y,x = np.ogrid[-n//2:n//2+1,-n//2:n//2+1]
    yf = np.exp(-(y*y/(2.*(1.414**(2*i)))))
    xf = np.exp(-(x*x/(2.*(1.414**(2*i)))))
    image = np.square(np.pad(cv2.filter2D(img,-1,(-(2*(1.414**(2*i))) + (x*x + y*y) ) *  (xf*yf) * (1/(2*np.pi*(1.414**(4*i))))),((1,1),(1,1)),'constant') )
    images.append(image)
  
  imagenp = np.array([i for i in images])
  cd = [] 
  for i in range(1,height):
    for j in range(1,width):
      sliced = imagenp[:,i-1:i+2,j-1:j+2] 
      if np.amax(sliced) >= 0.03: 
        z,x,y = np.unravel_index(sliced.argmax(),sliced.shape)
        cd.append((i+x-1,j+y-1,1.414**z)) 
  cd = np.array(list(set(cd)))
  pairs = np.array(list(spatial.cKDTree(cd[:,:-1]).query_pairs(cd[:,-1].max() * 2.828)))
  if len(pairs) != 0:
    for (i, j) in pairs:
      n_dim = len(cd[i]) - 1
      root_ndim = sqrt(n_dim)
      r1 = cd[i][-1] * root_ndim
      r2 = cd[j][-1] * root_ndim
      d = sqrt(np.sum((cd[i][:-1] - cd[j][:-1])**2))
      over = 0 if d > r1 + r2 else (1 if d <= abs(r1 - r2) else (r1 ** 2 * math.acos(np.clip((d ** 2 + r1 ** 2 - r2 ** 2) / (2 * d * r1), -1, 1)) + r2 ** 2 * math.acos(np.clip((d ** 2 + r2 ** 2 - r1 ** 2) / (2 * d * r2), -1, 1)) -0.5 * sqrt(abs((-d + r2 + r1) *(d - r2 + r1) * (d + r2 - r1) * ( d + r2 + r1))))/(math.pi * (min(r1, r2) ** 2)))
      if over > 0.5:
        if cd[i][-1] > cd[j][-1]: cd[j][-1] = 0
        else: cd[i][-1] = 0
  
  cd = np.array([b for b in cd if b[-1] > 0])

  fig, ax = plt.subplots()
  ax.imshow(img, interpolation='nearest',cmap="gray")
  for blob in co_ordinates:
    y,x,r = blob
    c = plt.Circle((x, y), r*1.414, color = "green", fill=False)
    ax.add_patch(c)
  ax.plot()  
  plt.show()

  break

